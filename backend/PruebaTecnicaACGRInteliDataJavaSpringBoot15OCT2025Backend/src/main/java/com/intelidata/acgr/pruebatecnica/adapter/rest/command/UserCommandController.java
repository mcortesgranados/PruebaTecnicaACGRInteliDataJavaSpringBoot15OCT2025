package com.intelidata.acgr.pruebatecnica.adapter.rest.command;

import com.intelidata.acgr.pruebatecnica.application.service.CreateUserService;
import com.intelidata.acgr.pruebatecnica.domain.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

/**
 * üß© <b>Controlador REST - UserCommandController</b><br>
 *
 * Este controlador forma parte del <b>adaptador de entrada (REST Command Adapter)</b> dentro de la arquitectura
 * hexagonal o arquitectura de puertos y adaptadores. Su prop√≥sito principal es exponer un endpoint HTTP que permita
 * recibir solicitudes del mundo exterior (por ejemplo, desde un frontend o un cliente externo) y convertirlas en
 * comandos del dominio que ser√°n procesados por la capa de aplicaci√≥n. üöÄ
 *
 * <p><b>üìç Rol en la arquitectura:</b><br>
 * üëâ Pertenece al <i>lado de los adaptadores de entrada</i> ("Inbound Adapters").<br>
 * üëâ Recibe solicitudes HTTP relacionadas con la creaci√≥n de usuarios.<br>
 * üëâ Transforma datos JSON en objetos de dominio ({@link User}) y delega la l√≥gica de negocio a la capa de aplicaci√≥n
 * mediante el servicio {@link CreateUserService}.<br>
 * üëâ Retorna respuestas HTTP estructuradas y significativas para el cliente.
 * </p>
 *
 * <p><b>üß† Principios SOLID aplicados:</b></p>
 * <ul>
 *   <li><b>S - Single Responsibility Principle (Responsabilidad √önica):</b><br>
 *       Esta clase se encarga √∫nicamente de orquestar la comunicaci√≥n entre el cliente HTTP y el servicio de negocio.
 *       No contiene l√≥gica de negocio ni manipula directamente la base de datos.</li>
 *
 *   <li><b>D - Dependency Inversion Principle (Inversi√≥n de Dependencias):</b><br>
 *       No depende de implementaciones concretas, sino del servicio {@link CreateUserService}, que es una abstracci√≥n
 *       de la l√≥gica de aplicaci√≥n. Esto permite desacoplar la capa REST de la capa de negocio.</li>
 * </ul>
 *
 * <p><b>‚öôÔ∏è Flujo de trabajo:</b></p>
 * <ol>
 *   <li>El cliente env√≠a una solicitud <code>POST /users</code> con un JSON que representa al usuario.</li>
 *   <li>El m√©todo {@link #createUser(User)} convierte el JSON en un objeto {@link User}.</li>
 *   <li>Se invoca el m√©todo <code>createUser()</code> del servicio {@link CreateUserService} para ejecutar la l√≥gica de negocio.</li>
 *   <li>Si todo sale bien, retorna un mensaje de √©xito; si ocurre un error, retorna una respuesta con el c√≥digo HTTP apropiado.</li>
 * </ol>
 *
 * <p><b>üß± Ejemplo de uso:</b></p>
 * <pre>
 * POST /users
 * {
 *   "id": 1,
 *   "name": "Aura Garz√≥n",
 *   "email": "aura@example.com"
 * }
 *
 * ‚Üí Respuesta exitosa:
 * {
 *   "message": "Usuario registrado exitosamente."
 * }
 * </pre>
 *
 * <p><b>üö® Manejo de errores:</b></p>
 * <ul>
 *   <li><code>409 CONFLICT</code> ‚Üí Si el correo ya existe (email duplicado).</li>
 *   <li><code>400 BAD REQUEST</code> ‚Üí Si los datos son inv√°lidos o faltantes.</li>
 *   <li><code>500 INTERNAL SERVER ERROR</code> ‚Üí Si ocurre un error inesperado en el servidor.</li>
 * </ul>
 *
 * @author
 * üë©‚Äçüíª <b>Aura Cristina Garz√≥n Rodr√≠guez</b>
 * @since Octubre 15, 2025
 */
@RestController
@RequestMapping("/users")
public class UserCommandController {

    private final CreateUserService createUserService;

    /**
     * üß† Constructor que inyecta el servicio de aplicaci√≥n {@link CreateUserService},
     * encargado de manejar la l√≥gica de negocio para la creaci√≥n de usuarios.
     *
     * @param createUserService servicio que implementa la l√≥gica de negocio de creaci√≥n de usuarios.
     */
    public UserCommandController(CreateUserService createUserService) {
        this.createUserService = createUserService;
    }

    /**
     * üì® <b>Endpoint REST para crear un nuevo usuario</b>.<br>
     * Recibe un objeto JSON con los datos del usuario, lo transforma en una entidad de dominio {@link User},
     * y delega la operaci√≥n de creaci√≥n al servicio {@link CreateUserService}.
     *
     * @param user objeto de dominio que representa al usuario a registrar.
     * @return una {@link ResponseEntity} con el resultado de la operaci√≥n.
     *
     * <p><b>Respuestas posibles:</b></p>
     * <ul>
     *   <li>‚úÖ <b>200 OK</b>: Usuario creado correctamente.</li>
     *   <li>‚ö†Ô∏è <b>409 CONFLICT</b>: El email ya est√° registrado.</li>
     *   <li>‚ùå <b>400 BAD REQUEST</b>: Datos inv√°lidos o incompletos.</li>
     *   <li>üí• <b>500 INTERNAL SERVER ERROR</b>: Error interno inesperado.</li>
     * </ul>
     */
    @Operation(
            summary = "Crea un nuevo usuario",
            description = "Crea un nuevo usuario en el sistema",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Lista devuelta correctamente",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = User.class))),
                    @ApiResponse(responseCode = "500", description = "Error interno del servidor")
            }
    )

    @PostMapping
    public ResponseEntity<?> createUser(@RequestBody User user) {
        try {
            createUserService.createUser(user);
            return ResponseEntity.ok(Map.of("message", "Usuario registrado exitosamente."));
        } catch (IllegalStateException ex) {
            if ("EMAIL_DUPLICATE".equals(ex.getMessage())) {
                return ResponseEntity.status(HttpStatus.CONFLICT)
                        .body(Map.of("error", "El email ya est√° registrado."));
            }
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("error", ex.getMessage()));
        } catch (IllegalArgumentException ex) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("error", ex.getMessage()));
        } catch (Exception ex) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Error al registrar el usuario."));
        }
    }
}
